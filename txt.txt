if (subcommand === 'panel') {
    const guildId = interaction.guild?.id;
    const ticketSettings = await Ticket.findOne({ guildId });

    if (!ticketSettings) {
        await interaction.reply({ content: `The ticket system is not setup for this server.`, ephemeral: true });
        return;
    }

    const ticketChannelId = ticketSettings?.channel || '';
    const ticketChannel = interaction.guild!.channels.cache.get(ticketChannelId) as TextChannel;

    const embedTitle = interaction.options.getString('embed_title')!;
    const embedDescription = interaction.options.getString('embed_description')!;
    const embedImage = interaction.options.getString('embed_image')!;
    const embedThumbnail = interaction.options.getString('embed_thumbnail')!;

    const embed = new EmbedBuilder()
        .setTitle(embedTitle)
        .setDescription(embedDescription)
        .setTimestamp();

    if (embedImage) embed.setImage(embedImage);
    if (embedThumbnail) embed.setThumbnail(embedThumbnail);

    // Select Menu mit Ticket-Kategorien
    const selectMenu = new StringSelectMenuBuilder()
        .setCustomId('select_ticket_category')
        .setPlaceholder('Select a ticket category...')
        .addOptions([
            { label: 'Technical Issue', value: 'technical_issue', description: 'Report a technical issue' },
            { label: 'Payment', value: 'payment', description: 'Issues related to payments' },
            { label: 'General', value: 'general', description: 'General inquiries' },
            { label: 'Bug', value: 'bug', description: 'Report a bug' },
            { label: 'Partnership', value: 'partnership', description: 'Request a partnership' },
            { label: 'Unban Request', value: 'unban_request', description: 'Request an unban' },
        ]);

    const row = new ActionRowBuilder<StringSelectMenuBuilder>().addComponents(selectMenu);

    if (!ticketChannel.permissionsFor(interaction.client.user!)?.has(PermissionFlagsBits.SendMessages)) {
        console.error('Bot does not have permission to send messages in the ticket channel.');
        await interaction.reply({ content: `I don't have permission to send messages in the ticket channel.`, ephemeral: true });
        return;
    }

    try {
        await interaction.deferReply({ ephemeral: true });
        await ticketChannel.send({ embeds: [embed], components: [row] });
        await interaction.followUp({ content: `Ticket panel has been sent to ${ticketChannel}.`, ephemeral: true });
    } catch (error) {
        console.error(`Error sending ticket panel:`, error);
        await interaction.followUp({ content: `There was an error sending the ticket panel. Please try again later.`, ephemeral: true });
    }
}
